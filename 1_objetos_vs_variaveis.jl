### A Pluto.jl notebook ###
# v0.20.18

using Markdown
using InteractiveUtils

# ‚ïî‚ïê‚ï° 4c79a447-fb0e-4f15-9a68-beb96bbb596b
md"""
# Objetos vs. Vari√°veis

‚ö†Ô∏è Aviso: o conte√∫do deste script talvez seja o mais importante de todos. Ele parece simples √† primeira vista, mas aposto que muitas pessoas (inclusive eu) acabam revisitando esse assunto com certa frequ√™ncia ‚Äî especialmente quando v√™m de outra linguagem de programa√ß√£o ou n√£o tiveram um curso introdut√≥rio de computa√ß√£o com foco em tipos de objetos/vari√°veis.

---

**author:** Lucas V. Perasolo [(email)](l.perasolovicentim@gmail.com)\
**last_updated:** 23/10/2025

---

## Recursos

1. Veja as respectivas fontes utilizadas nos links abaixo.

---
"""

# ‚ïî‚ïê‚ï° 14702fb0-a360-11f0-11a0-b96ecbd2512e
md"""

## 1. Objetos

### Em Julia 
vive-se pelo **princ√≠pio** de que *tudo √© um objeto* (*everything is an object*).

### O que √© um objeto?

Um **objeto** √© um peda√ßo de mem√≥ria no computador que possui duas caracter√≠sticas/atributos:

1. um **Estado** ‚Äî definido pelo seu conte√∫do em *bits* (zeros e uns);
2. um **Tipo** ‚Äî definido pela forma como esses bits devem ser interpretados.
---
"""


# ‚ïî‚ïê‚ï° 57dab13d-634e-4d78-b811-95f31d01d708
let
    println("Come√ßamos com um exemplo, o n√∫mero 8. Qual √© o seu tipo e seu tamanho?")
    println("O objeto 8 √© do tipo $(typeof(8)) e tem $(sizeof(8)) bytes.")
end

# ‚ïî‚ïê‚ï° df8bb3ca-5260-473d-acde-79a41189ca5e
md"""

### Scopes em Julia

No bloco acima, observe que agrupamos dois comandos na mesma c√©lula. Por defini√ß√£o/constru√ß√£o, o Pluto n√£o deixa voc√™ executar mais de um comando por c√©lula [Veja: Pluto Forum](https://discourse.julialang.org/t/pluto-begin-end-usage/79559/2). 

Caso voc√™ ainda queira executar mais de um comando por c√©lula, voc√™ deve definir um **"scope"**. Eu penso em scopes como uma regi√£o no meu arquivo onde meus objetos "vivem"/s√£o definidos. Se eu tentar acess√°-los fora de seu scope, eu n√£o consigo. A defini√ß√£o formal de **scopes** est√° aqui: [Julia Scopes](https://docs.julialang.org/en/v1/manual/variables-and-scoping/).

Existem diferentes maneiras de criar scopes em Julia, por exemplo atrav√©s de `begin {...} end` ou `let {...} end`.

---

"""

# ‚ïî‚ïê‚ï° 502a6f91-dbda-4b99-b8e5-bd9cf05624b8
md"""
### (Breve) Excurs√£o: Bits & Bytes

No computador, n√≥s tentamos representar informa√ß√£o. Por exemplo, a express√£o **"oi mundo"**.  
Na linguagem do computador, "oi mundo" √© representado por bits e bytes. 

üìú Veja: [Bit (wikipedia)](https://pt.wikipedia.org/wiki/Bit)

- O **Bit** √© a menor unidade de medida no computador  
- Um Bit pode ter dois estados ${0,1}$ ‚Äî esse fato nos motiva a usar uma base num√©rica diferente da que usamos no dia a dia (a base decimal), respectivamente a **base bin√°ria**  
  üìú Veja: [Convers√£o de base num√©rica (wikipedia)](https://pt.wikipedia.org/wiki/Convers%C3%A3o_de_base_num%C3%A9rica)

üìú Veja: [Byte (wikipedia)](https://pt.wikipedia.org/wiki/Byte)

- Um **Byte** tamb√©m √© uma unidade de medida de informa√ß√£o no computador.  
- Um Byte √© exatamente 8 bits.

Dessa forma, com o pouco que vimos sobre bits e bytes, j√° √© poss√≠vel estabelecer a seguinte vis√£o sobre como a informa√ß√£o √© representada no computador.  
Se pegarmos o n√∫mero $8$ e reescrevermos ele da seguinte forma:

$$8 = 2*2*2 = 2^3 = 1*2^3 = 0 + 1*2^3 + 0$$

Agora observamos que:

1. Ao escrever 8 como pot√™ncias de 2, obtivemos a representa√ß√£o do 8 em base bin√°ria (isto √©, escrita em termos de 2)  
2. A express√£o $0 + 1*2^3 + 0$ √© estranha (ningu√©m em sua consci√™ncia escreve assim no dia a dia), mas pode revelar a diferen√ßa entre tipos de dados (a seguir).

## Tipos de dados

‚ö†Ô∏è **Aviso:** Eu ignoro n√∫meros racionais/decimais nesse script. Eles ter√£o um script dedicado somente a eles, j√° que lidar com eles √© mais dif√≠cil.

Bom, apesar de existirem in√∫meros tipos de dados em Julia, em primeiro lugar vamos olhar somente o tipo de dado chamado **unsigned integer** (n√∫mero inteiro sem sinal).  
As colunas a seguir s√£o:

1. **Tipo**: descreve o tipo da vari√°vel armazenada `UInt<N√∫mero de bits √† disposi√ß√£o>`  
2. **Bits**: n√∫mero de bits √† disposi√ß√£o  
3. **Valor M√°ximo**: dado o n√∫mero de bits √† disposi√ß√£o, o valor m√°ximo √© a quantidade de informa√ß√£o que pode ser armazenada nesse objeto  
4. **Exemplo de representa√ß√£o: N√∫mero 8** ‚Äî como o n√∫mero 8 √© representado no computador  
5. **Uso de mem√≥ria em Byte** ‚Äî se 1 Byte = 8 bits, ent√£o o n√∫mero de bits dividido por 8 nos d√° o espa√ßo em mem√≥ria (em bytes) reservado para o objeto.

### Tabela:

| Tipo     | Bits | Intervalo de valores | Exemplo de representa√ß√£o: N√∫mero $8$ | Uso de mem√≥ria em Byte |
|-----------|------|----------------------|--------------------------------------|-------------------------|
| `UInt8`   | 8    | $[0, 2^8 - 1] = [0, 255]$ | `0000 1000`  | 1 Byte |
| `UInt16`  | 16   | $[0, 2^{16} - 1]$ | `0000 0000 0000 1000` | 2 Bytes |
| `...`     | ...  | ... | ... | ... |
| `UInt128` | 128  | $[0, 2^{128} - 1]$ | `...0000 1000` (com 120 zeros √† esquerda) | 16 Bytes |

---

**Observa√ß√µes/Perguntas:**

- Com a nota√ß√£o $[0,255]$, refiro-me a todos os n√∫meros $0,\dots,255$  

- Se na verdade $2^8 = 256$, ent√£o por que nos falta 1 bit?  
  **Resposta:**  

- E se usarmos o tipo **Int8** ao inv√©s do **UInt8**, qual √© o intervalo de n√∫meros?  

- ‚ÄúBom, eu sei que o meu computador tem uma mem√≥ria finita. Ent√£o faz sentido viver pelo princ√≠pio de sempre usar o tipo de dado que menos reserva espa√ßo na mem√≥ria. Olhando a tabela, o **UInt8**.‚Äù  
  Esse pensamento faz sentido?  
  **Resposta:**  
  1. Faz sentido ter em mente que queremos escrever c√≥digo eficiente e tirar o melhor dos nossos recursos (ex.: minimizar o uso de mem√≥ria).  
  2. Mas considere agora o c√≥digo: descomente temporariamente `y = UInt8(256)`  
"""

# ‚ïî‚ïê‚ï° cd1c6865-042a-43a8-8eaa-dcd4e8883982
begin 
	x = UInt8(255)
	print("O valor de x √© ", x, " e seu tipo √© ", typeof(x))
	# y = UInt8(256) ## Descomentando esse c√≥digo e executando a c√©lula deve levantar um erro
	z = 256
	print("\nO valor de z √© ", z, " e seu tipo √© ", typeof(z)) 
end	

# ‚ïî‚ïê‚ï° a51bbc6e-6b1f-4756-b83a-bec9f4651f48
md"""
O output da c√©lula acima √© "0xff", o n√∫mero 255 representado em base 16 (hexadecimal). Isso significa: $255 = 15 \times 16^1 + 15 \times 16^0$. Agora adicionemos $1$ a $255$, em hexadecimal: 

$255 + 1 = 0\text{xff} + 0\text{x}1$

O que devemos esperar da adi√ß√£o? Eu diria 256...
"""

# ‚ïî‚ïê‚ï° bea47ada-f306-4928-8ece-11b0989cf48a
x + 0x1

# ‚ïî‚ïê‚ï° 437614d8-8bbc-43a7-80c0-8f857e2d4f38
md"""
... na verdade ganhamos 
$0\text{x}00 = 0$. Qual √© o sentido disso ??? Bom, isso revela uma caracter√≠stica de Julia chamada **"wrap around"** ("voltamos para o  come√ßo"). Uma forma de ver o "wrap around" √© imaginar estar andando em uma escada com um limite de degraus (ex.: 10 degraus). Se andarmos 11 degraus, voltamos para o primeiro andar e n√£o chegamos ao 11¬∫ degrau (ex.: [escada de Penrose](https://mathworld.wolfram.com/PenroseStairway.html)).

![Escada de Penrose](https://imgs.search.brave.com/dnnAEqcFpIXsDOxRacNW-rShDecL_EPpfrt5QUrqXYU/rs:fit:500:0:1:0/g:ce/aHR0cHM6Ly91cGxv/YWQud2lraW1lZGlh/Lm9yZy93aWtpcGVk/aWEvY29tbW9ucy8z/LzM0L0ltcG9zc2li/bGVfc3RhaXJjYXNl/LnN2Zw)

üìú Fonte: [Wikipedia](https://pt.wikipedia.org/wiki/Escada_de_Penrose)

---

‚ö†Ô∏è **Observe**

1. que Julia escolheu o tipo de dado para o n√∫mero 256. 64 Bits √© o m√≠nimo necess√°rio para representar o n√∫mero 256, j√° que: $2^8 = 256$ e $8 \times 8 = 64$

2. que ao criarmos o scope por meio do comando `begin`, eu posso acessar o objeto `x` na c√©lula seguinte √†quela na qual foi definido.

3. Existem v√°rios motivos pelos quais usamos a representa√ß√£o hexadecimal. Em linhas gerais, usamos essa base especialmente porque ela √© uma forma compacta de representar grandes n√∫meros e ela se encaixa bem com a base bin√°ria. Se voc√™ se interessa sobre n√∫meros hex mais a fundo, seguem algumas fontes de informa√ß√£o:

- [Discuss√£o no Stack Overflow sobre por que usamos hex em mem√≥ria?](https://stackoverflow.com/questions/5329916/why-are-memory-addresses-are-represented-using-hexadecimal-numbers)
- [Tripleto Hexadecimal](https://pt.wikipedia.org/wiki/Tripleto_hexadecimal)
---
"""

# ‚ïî‚ïê‚ï° a21e0838-e961-4574-b219-90ab1f667974
md"""
## "Uma regra de bolso"

At√© onde eu entendo, a decis√£o de qual tipo de dado usar para um objeto n√£o √© simples ‚Äî especialmente se o objeto n√£o √© constante. Caso o objeto seja constante, podemos formular a seguinte "regra de bolso" para programa√ß√£o **em Julia**:

**Regra de bolso**: o tipo do objeto

1. √© no m√≠nimo, o m√≠nimo necess√°rio; 
2. √© no m√°ximo, o tamanho do CPU da sua m√°quina 

**Note**: caso voc√™ esteja trabalhando com n√∫meros onde o sinal deles ("$\pm$") importa, tamb√©m √© importante diferenciar entre tipos **signed** (com sinal) vs. **unsigned** (sem sinal).

**‚ö†Ô∏è Aviso:** para c√≥digo fonte ("in source code"), Julia mesmo escolher√° o tipo para voc√™.

----
"""

# ‚ïî‚ïê‚ï° 4cb9ef6c-7cbb-4ee8-936e-d8cc3348e586
md"""
### Classes de objetos: "mutable vs. immutable"

O tipo de um objeto determina se ele pertence √† classe de objetos mut√°veis (mutable) ou imut√°veis (immutable). Para n√£o me estender aqui, eu escolho listar objetos que s√£o, em linhas gerais, mut√°veis ou n√£o, e adicionar recursos para o leitor ver os detalhes desse assunto extenso:

- Objetos **mut√°veis** incluem: Big Integers, Big Floats e espec√≠ficos tipos de arrays.

- Objetos **imut√°veis** incluem: n√∫meros inteiros, floats, complexos, racionais (sem o termo "Big" no nome), fun√ß√µes, Tuples, e alguns tipos espec√≠ficos de arrays (ex.: Ranges).


üìú Veja mais:
1. [Julia Notes: "Immutable and mutable variables"](https://m3g.github.io/JuliaNotes.jl/stable/immutable/)
2. [Julia: "Types"](https://docs.julialang.org/en/v1/manual/types/)
3. [Julia: Mutable composite types](https://docs.julialang.org/en/v1/manual/types/#Mutable-Composite-Types)
4. [Julia: Integers and Floats](https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/)
5. [Julia: Complex and rational numbers](https://docs.julialang.org/en/v1/manual/complex-and-rational-numbers/)
6. [Julia: Fun√ß√µes](https://docs.julialang.org/en/v1/manual/functions/)
7. [Julia: Tuples](https://docs.julialang.org/en/v1/manual/functions/#Tuples)

---

"""

# ‚ïî‚ïê‚ï° 489ca8d6-85de-44c1-9cdb-657e3a756509
md""" ## 2. Vari√°veis 
[Vari√°veis](https://docs.julialang.org/en/v1/manual/variables/) em Julia s√£o simplesmente um "nome" associado ("bounded" ‚Äî por isso vari√°veis s√£o chamadas de "binding" tamb√©m) a um valor. Uma maneira de visualizar essa associa√ß√£o √© por meio de uma flecha que aponta para o objeto real. Por exemplo, consideremos o caso de um array (mut√°vel) com as primeiras 4 pot√™ncias de 2:
"""

# ‚ïî‚ïê‚ï° 8e59111c-c502-46e8-9e98-f286c3297248
let
    x = [1, 2, 4, 8]
    println("üì¶ Informa√ß√µes da Vari√°vel")
    println("--------------------------")
    println("Valor: ", x)
    println("Tipo: ", typeof(x))
    println("Tamanho em bytes (do objeto array): ", sizeof(x))
    println("Endere√ßo de mem√≥ria (objeto no heap): ", pointer_from_objref(x))
    println("Endere√ßo do primeiro elemento (dados): ", pointer(x))
    println("--------------------------")
    println("‚ö†Ô∏è Observa√ß√£o:")
    println("  O primeiro endere√ßo acima aponta para o objeto 'Array' em si (estrutura de metadados).")
    println("  J√° o segundo endere√ßo aponta para o bloco de mem√≥ria onde os n√∫meros [2, 4, 8] est√£o armazenados.")
end

# ‚ïî‚ïê‚ï° aa0ef774-2069-42ee-8211-075d748b9c95
md""" 

‚ö†Ô∏è **Importante**

Nesse script, a gente beira o tema de administra√ß√£o de mem√≥ria (um dos temas mais importantes do campo de sistemas operacionais). Eu recomendo a todos interessados explorar um pouco de administra√ß√£o de mem√≥ria, especialmente na linguagem de programa√ß√£o C ‚Äî j√° que esta est√° por detr√°s de como mem√≥ria √© administrada em in√∫meros outros projetos como Python, Linux, etc. 

Eu tenho a sensa√ß√£o de que entender administra√ß√£o de mem√≥ria diferencia o programador. Mas isso pode ser uma concep√ß√£o errada minha...

Em Julia, n√≥s n√£o administramos mem√≥ria manualmente (pelo menos n√£o por defini√ß√£o), porque Julia tem um **[garbage collector](https://pt.wikipedia.org/wiki/Coletor_de_lixo_(inform%C3%A1tica))** (coletor de lixo) ‚Äî isto √©, um processo que automaticamente cuida da administra√ß√£o de mem√≥ria para voc√™. Se voc√™ quiser saber mais sobre administra√ß√£o de mem√≥ria, o que se torna relevante quando n√≥s enfrentamos problemas de precis√£o significativos, veja:

0. [Tutorial Youtube (EN): "Memory Management High Performance Computing (HPC) in Julia"](https://www.youtube.com/watch?v=NrW4SGNBdIY)
1. [Tutorial Youtube (EN): "What are variables?" & other basics](https://www.youtube.com/watch?v=LmP_dc-00SI)
2. [Julia: How variables are stored? (EN)](https://discourse.julialang.org/t/understanding-how-variables-are-stored/46491)
3. [Julia: Understanding memory usage (EN)](https://discourse.julialang.org/t/understanding-memory-usage-in-julia/101647)

‚ö†Ô∏è **Recursos adicionais e gerais sobre mem√≥ria**

1. [Stack vs. Heap](https://www.geeksforgeeks.org/dsa/stack-vs-heap-memory-allocation/)

---

"""

# ‚ïî‚ïê‚ï° 00000000-0000-0000-0000-000000000001
PLUTO_PROJECT_TOML_CONTENTS = """
[deps]
"""

# ‚ïî‚ïê‚ï° 00000000-0000-0000-0000-000000000002
PLUTO_MANIFEST_TOML_CONTENTS = """
# This file is machine-generated - editing it directly is not advised

julia_version = "1.11.7"
manifest_format = "2.0"
project_hash = "da39a3ee5e6b4b0d3255bfef95601890afd80709"

[deps]
"""

# ‚ïî‚ïê‚ï° Cell order:
# ‚ïü‚îÄ4c79a447-fb0e-4f15-9a68-beb96bbb596b
# ‚ïü‚îÄ14702fb0-a360-11f0-11a0-b96ecbd2512e
# ‚ï†‚ïê57dab13d-634e-4d78-b811-95f31d01d708
# ‚ïü‚îÄdf8bb3ca-5260-473d-acde-79a41189ca5e
# ‚ïü‚îÄ502a6f91-dbda-4b99-b8e5-bd9cf05624b8
# ‚ï†‚ïêcd1c6865-042a-43a8-8eaa-dcd4e8883982
# ‚ïü‚îÄa51bbc6e-6b1f-4756-b83a-bec9f4651f48
# ‚ï†‚ïêbea47ada-f306-4928-8ece-11b0989cf48a
# ‚ïü‚îÄ437614d8-8bbc-43a7-80c0-8f857e2d4f38
# ‚ïü‚îÄa21e0838-e961-4574-b219-90ab1f667974
# ‚ïü‚îÄ4cb9ef6c-7cbb-4ee8-936e-d8cc3348e586
# ‚ïü‚îÄ489ca8d6-85de-44c1-9cdb-657e3a756509
# ‚ï†‚ïê8e59111c-c502-46e8-9e98-f286c3297248
# ‚ïü‚îÄaa0ef774-2069-42ee-8211-075d748b9c95
# ‚ïü‚îÄ00000000-0000-0000-0000-000000000001
# ‚ïü‚îÄ00000000-0000-0000-0000-000000000002
